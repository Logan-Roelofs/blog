<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on </title>
    <link>//localhost:1313/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 16 Mar 2024 10:00:00 -0600</lastBuildDate>
    <atom:link href="//localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Editing Astro projects with Neovim</title>
      <link>//localhost:1313/posts/2024/03-16-config-neovim-for-astro/</link>
      <pubDate>Sat, 16 Mar 2024 10:00:00 -0600</pubDate>
      <guid>//localhost:1313/posts/2024/03-16-config-neovim-for-astro/</guid>
      <description>Astro is a fast &amp;amp; dynamic web framework designed to be flexible enough for small static websites, blogs, big interactive apps, and more. I&amp;rsquo;ve been interested in checking it out since building silly little static websites that are &amp;ldquo;Content-first&amp;rdquo; is a fun past-time of mine.
Since Neovim is my main text editor, it took abit of configuration fu to get things up and running.
Herein is my Astro setup:
Prerequisites You probably already have most of these tools installed since they have become synonymous with most Neovim configs:</description>
      <content:encoded><![CDATA[<p><a href="https://astro.build/">Astro</a> is a fast &amp; dynamic web framework designed to be flexible
enough for small static websites, blogs, big interactive apps, and more.
I&rsquo;ve been interested in checking it out since building silly little static websites
that are &ldquo;Content-first&rdquo; is a fun past-time of mine.</p>
<p>Since Neovim is my main text editor, it took <em>abit</em> of configuration fu
to get things up and running.</p>
<p>Herein is my Astro setup:</p>
<hr>
<h2 id="prerequisites">Prerequisites</h2>
<p>You probably already have most of these tools installed since they have become
synonymous with most Neovim configs:</p>
<ul>
<li>A newer version of <a href="https://github.com/neovim/neovim">Neovim</a> -
At the time of this writing, <a href="https://github.com/neovim/neovim/releases/tag/v0.9.5">the latest version is v0.9.5</a>.
I typically recommend staying on the latest Neovim version since it gets you the latest
features that various plugins may take advantage of.</li>
<li>A package manager - these days, I (and it seems most of the Neovim community)
typically recommend <a href="https://github.com/folke/lazy.nvim">Lazy.nvim</a></li>
<li><a href="https://github.com/nvim-treesitter/nvim-treesitter">Treesitter for Neovim</a> - an essential tool
for syntax parsing and definitions.</li>
</ul>
<h2 id="install-treesitter-parsers">Install Treesitter parsers</h2>
<p>Astro files are actually amalgamations of several technologies.
Depending on your Astro configuration, there may be HTML, Typescript, CSS, JavaScript, Tsx, etc.</p>
<p>In order to get syntax highlighting and parsing, you&rsquo;ll need to install
a few Treesitter parsers that enable Treesitter to introspect the different
chunks of an Astro file:</p>
<p>On the Neovim command palate, first make sure Treesitter is updated:</p>
<pre tabindex="0"><code>:TSUpdate
</code></pre><p>Then, install the parsers:</p>
<pre tabindex="0"><code>:TSInstall astro
:TSInstall css
:TSInstall typescript
:TSInstall tsx
</code></pre><p>Depending on your Treesitter setup, you may choose to ensure these parsers are always
installed via the <code>nvim-treesitter</code> plugin:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-lua" data-lang="lua"><span style="display:flex;"><span>require(<span style="color:#e6db74">&#34;nvim-treesitter.configs&#34;</span>).setup({
</span></span><span style="display:flex;"><span>	ensured_installed <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;astro&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;css&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;typescript&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;tsx&#34;</span>,
</span></span><span style="display:flex;"><span>	},
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This way, you don&rsquo;t have to manually remember to install these parsers:
they&rsquo;ll just be there thanks to Treesitter&rsquo;s config.</p>
<h2 id="treesitter-grammar-plugin">Treesitter grammar plugin</h2>
<p>Having the parsers alone won&rsquo;t give Treesitter everything it needs to correctly
parse and crawl your Astro files: you&rsquo;ll also need to install <a href="https://github.com/virchau13/tree-sitter-astro">this community</a>
plugin that provides Treesitter with the appropriate grammar for how to <em>actually</em>
use the parsers we&rsquo;ve installed to interpret those files.</p>
<p>In the future, this may eventually be upstreamed into Treesitter itself.
But for now, at the time of this writing, you&rsquo;ll need this additional plugin
to instruct Treesitter on how to understand <code>.astro</code> files.</p>
<p>In short, this ensures that the Astro specification is understood by Treesitter:</p>
<pre tabindex="0"><code>---
{typescript}
---
{html}
</code></pre><p>having Typescript highlighting and syntax definitions in the frontmatter.
And HTML / Tsx in the rest of the <code>.astro</code> file.</p>
<p>To install the plugin, using Lazy in your lua configs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-lua" data-lang="lua"><span style="display:flex;"><span><span style="color:#75715e">-- Astro treesitter grammar bindings</span>
</span></span><span style="display:flex;"><span>{ <span style="color:#e6db74">&#34;virchau13/tree-sitter-astro&#34;</span> },
</span></span></code></pre></div><h2 id="astro-language-server">Astro language server</h2>
<p>As you may already know, language servers for Neovim are the bread and butter
of modern code editing. Without one, you&rsquo;re <em>almost</em> back to the dark age.</p>
<p>In order to get modern functionality when editing your Astro files
(like inline suggestions, &ldquo;Go to definition&rdquo;, &ldquo;Refactor across project&rdquo;, &ldquo;Find types&rdquo;, etc.)
you&rsquo;ll need an Astro language server.</p>
<p>To install the server for use by Neovim, you can get it globally via <code>npm</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>npm install -g @astrojs/language-server
</span></span></code></pre></div><h4 id="optional-install-language-server-through-mason">Optional: Install language server through Mason</h4>
<p>These days, I&rsquo;ve moved away from installing one off bespoke editor tools
from a myriad of ecosystems.
And, instead, have chosen to unify my editor toolchain using <a href="https://github.com/williamboman/mason.nvim">Mason</a>:</p>
<pre tabindex="0"><code>:MasonInstall astro-language-server
</code></pre><p>This installs the language server through the Mason framework
and allows me to manage <em>all</em> of my Neovim editor tools (LSPs, DAPs, linters, etc.)
from within Mason instead of through one off package managers.
More importantly, it gives me consistency across the many different machines
I may be using my Neovim configs with:
no more jumping to a new machine and having to remember
what commands I used to install some random, one-off tool.
Now, it&rsquo;s all just managed by Mason.</p>
<p>Further, within Mason&rsquo;s config (and the <code>mason-lspconfig</code> config helper plugin)
I can force the Astro language server to be installed automatically.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-lua" data-lang="lua"><span style="display:flex;"><span>require(<span style="color:#e6db74">&#34;mason&#34;</span>).setup()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Ensures the servers named in nvim-lspconfig are installed by Mason</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>require(<span style="color:#e6db74">&#34;mason-lspconfig&#34;</span>).setup({
</span></span><span style="display:flex;"><span>	ensure_installed <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;astro&#34;</span>,
</span></span><span style="display:flex;"><span>	},
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><h2 id="configure-your-astro-language-server">Configure your Astro language server</h2>
<p>To actually enable and attach your Astro language server when editing <code>.astro</code> files,
you&rsquo;ll need to configure it via <a href="https://github.com/neovim/nvim-lspconfig">the <code>nvim-lspconfig</code> plugin</a>;
the configuration binding plugin for all language servers used by Neovim.</p>
<p>To install <code>nvim-lspconfig</code> via Lazy.nvim:</p>
<pre tabindex="0"><code>-- nvim LSP configs
{ &#34;neovim/nvim-lspconfig&#34; },
</code></pre><p>Configuring the language server is actually rather simple, but it&rsquo;s an important step
to ensure <code>.astro</code> files are &ldquo;seen&rdquo; by Neovim and attached to your installed Astro language server:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-lua" data-lang="lua"><span style="display:flex;"><span><span style="color:#66d9ef">local</span> lspconfig <span style="color:#f92672">=</span> require(<span style="color:#e6db74">&#34;lspconfig&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- Astro langauge server</span>
</span></span><span style="display:flex;"><span>lspconfig.astro.setup({})
</span></span></code></pre></div><p>For a full understanding of the defaults and possible configuration options,
<a href="https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#astro">read up on it here</a>.</p>
<h2 id="fin">Fin</h2>
<p>And that&rsquo;s it! This gets you the basic setup with syntax highlighting, the Astro language server, etc.
Happy coding!</p>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    <item>
      <title>Awk: A beginners guide for humans</title>
      <link>//localhost:1313/posts/2024/03-03-awk-basics/</link>
      <pubDate>Sun, 03 Mar 2024 09:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/2024/03-03-awk-basics/</guid>
      <description>Earlier this week, I had a file of names, each delimited by a newline:
john jack jill But really, I needed this file to be in the form:
{ &amp;#34;full_name&amp;#34;: &amp;#34;name&amp;#34; }, This file wasn&amp;rsquo;t absolutely huge, but it was big enough that editing it manually would have been annoying. I thought to myself, &amp;ldquo;instead of editing this file manually or generating it correctly, how can I spend the maximum amount of time using a bespoke tool to get it in the right format?</description>
      <content:encoded><![CDATA[<p>Earlier this week, I had a file of names, each delimited by a newline:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>john
</span></span><span style="display:flex;"><span>jack
</span></span><span style="display:flex;"><span>jill
</span></span></code></pre></div><p>But really, I needed this file to be in the form:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    &#34;full_name&#34;: &#34;name&#34;
</span></span><span style="display:flex;"><span>},
</span></span></code></pre></div><p>This file wasn&rsquo;t absolutely huge, but it was big enough that editing it manually
would have been annoying. I thought to myself, &ldquo;instead of editing this file manually
or generating it correctly, how can I spend the maximum amount of time
using a bespoke tool to get it in the right format?
A neovim macro? Sed? Write some python? Why not awk!&rdquo;</p>
<p>In the end, here&rsquo;s the awk command I used:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>awk <span style="color:#e6db74">&#39;{print &#34;{\n    \&#34;full_name\&#34;: \&#34;&#34; $0 &#34;\&#34;\n},&#34;}&#39;</span> names.txt
</span></span></code></pre></div><p>This printed each line surrounded by the appropriate curly braces and whitespace.</p>
<hr>
<p>Let&rsquo;s break down how I did this and build the command one bit at a time:</p>
<ol>
<li>Awk is a Linux command line utility just like any other.
But, similar to something like like python or lua,
it&rsquo;s a special program interpreter that is especially
good at scanning and processing inputs with small (or big) one liner programs you give it.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>awk <span style="color:#e6db74">&#39;&lt;an-awk-program&gt;&#39;</span> some-input-file
</span></span></code></pre></div><ol start="2">
<li>Let&rsquo;s start simple and just print the names from the file directly to stdout:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>awk <span style="color:#e6db74">&#39;{print $0}&#39;</span> names.txt
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>john
</span></span><span style="display:flex;"><span>jack
</span></span><span style="display:flex;"><span>jill
</span></span></code></pre></div><p>within the <code>''</code>, we provide awk with a small program it will execute.
This is basically the &ldquo;hello world&rdquo; of awk: it just takes each line and prints it out
just like it is, unedited, in the file.</p>
<p>But what is <code>$0</code>?
Awk has the concept of &ldquo;columns&rdquo; in a file: these are typically space delimited.
So a file like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>1 2 3
</span></span><span style="display:flex;"><span>4 5 6 
</span></span></code></pre></div><p>has 3 columns and 2 rows.
The <code>$0</code> variable is a special one and represents the entire row of arguments.
Then, each <code>$N</code> is the N-th (where 1 is the first column) argument in that row.</p>
<p>So, if we only wanted the 1st column in the above file with 3 columns,
we could run the following awk program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>awk <span style="color:#e6db74">&#39;{print $1}&#39;</span> numbers.txt
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>1
</span></span><span style="display:flex;"><span>4
</span></span></code></pre></div><p>If we only wanted the 2nd and 3rd columns, we could run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>awk <span style="color:#e6db74">&#39;{print $2 &#34; &#34; $3}&#39;</span> numbers.txt
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>2 3
</span></span><span style="display:flex;"><span>5 6
</span></span></code></pre></div><p>(notice the blank <code>&quot; &quot;</code> we provide as a string to force some whitespace formatting
so the columns are closer to what exists in the original file.</p>
<ol start="3">
<li>Next, lets add in some additional text to print out:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>awk <span style="color:#e6db74">&#39;{print &#34;{\&#34;full_name\&#34;: \&#34;&#34; $0 &#34;\&#34;},&#34;}&#39;</span> names.txt
</span></span></code></pre></div><p>First thing you&rsquo;ll notice is a confusing array of <code>&quot;</code></p>
<ul>
<li>the first <code>&quot;</code> denotes the beginning of a string output for awk to print.
The subsequent <code>\&quot;</code> are literal escaped quotes which we <em>want</em> to appear in the output.
We eventually end the first string with a standalone <code>&quot;</code> to then print the line with the <code>$0</code> variable
and then we enter a string again to add the trailing bracket <code>}</code> and comma <code>,</code></li>
</ul>
<p>When run, this outputs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>{&#34;full_name&#34;: &#34;john&#34;},
</span></span><span style="display:flex;"><span>{&#34;full_name&#34;: &#34;jack&#34;},
</span></span><span style="display:flex;"><span>{&#34;full_name&#34;: &#34;jill&#34;},
</span></span></code></pre></div><ol start="4">
<li>Now we&rsquo;re getting somewhere! Let&rsquo;s finish this off by adding the additional white spacing:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>awk <span style="color:#e6db74">&#39;{print &#34;{\n    \&#34;full_name\&#34;: \&#34;&#34; $0 &#34;\&#34;\n},&#34;}&#39;</span> names.txt
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    &#34;full_name&#34;: &#34;john&#34;
</span></span><span style="display:flex;"><span>},
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    &#34;full_name&#34;: &#34;jack&#34;
</span></span><span style="display:flex;"><span>},
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    &#34;full_name&#34;: &#34;jill&#34;
</span></span><span style="display:flex;"><span>},
</span></span></code></pre></div><p>The added whitespace within the strings (by including the literal escaped newlines <code>\n</code>)
are printed to give the correct, desired output!</p>
<ol start="5">
<li>Bonus: what if we wanted to remove the trailing comma?
What if we wanted to wrap this all in <code>[...]</code> to be closer to valid json?
Yeah, yeah, I know, <code>jq</code> exists, but by the power of our lord and savior awk,
all things possible!!</li>
</ol>
<p>To remove the trailing comma, we can use a sliding window technique:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>awk <span style="color:#e6db74">&#39;NR &gt; 1 {print prev &#34;,&#34;} {prev = &#34;{\n    \&#34;full_name\&#34;: \&#34;&#34; $0 &#34;\&#34;\n}&#34;} END {print prev}&#39;</span> names.txt
</span></span></code></pre></div><p>This introduces abit more complexity.</p>
<p>First, we add the <code>NR</code> concept: <code>NR</code> is the &ldquo;number of records&rdquo;.
This can be really useful for checking progress,
doing different things based on number of records processed, etc.</p>
<p>So, after the first record, we print the comma.
We also always store the &ldquo;previous&rdquo; chunk in a <code>prev</code> variable:
this is the N + 1 sliding window. Nothing actually happens when the first record is processed,
it&rsquo;s line output is simply stored in the <code>prev</code> variable to be printed on the next iteration.
This way, we&rsquo;re always one behind the current record
and when we reach the very end (using the <code>END</code> keyword),
we can print the previous chunk without the trailing comma!</p>
<p>To wrap it up the entire output in a square bracket and give it the correct spacing,
we can use this awk program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-awk" data-lang="awk"><span style="display:flex;"><span>BEGIN {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Print the opening bracket for the JSON array</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;[&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NR <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># after the first line, print the previously stored chunk</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">print</span> <span style="color:#a6e22e">prev</span> <span style="color:#e6db74">&#34;,&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Store the current line in a JSON object format</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">prev</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;    {\n        \&#34;full_name\&#34;: \&#34;&#34;</span> <span style="color:#f92672">$</span><span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#34;\&#34;\n    }&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>END {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Print the last line stored in prev and close the JSON array</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">print</span> <span style="color:#a6e22e">prev</span> <span style="color:#e6db74">&#34;\n]&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can run this awk program via a file instead of doing all of that on the command line directly.
This greatly helps with readability, maintainability, etc.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>awk -f format_names.awk names.txt
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>[
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        &#34;full_name&#34;: &#34;john&#34;
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        &#34;full_name&#34;: &#34;jack&#34;
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        &#34;full_name&#34;: &#34;jill&#34;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p>Just like the previous awk program, we are printing each segment and then at the end,
leaving off the trailing comma. But this time, at the beginning of the program,
using <code>BEGIN</code> and <code>END</code>, we print an opening and closing bracket.</p>
<hr>
<p>Happy awk-ing and good luck!</p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    <item>
      <title>Job scheduling with tmux</title>
      <link>//localhost:1313/posts/2024/01-15-tmux-scheduling/</link>
      <pubDate>Mon, 15 Jan 2024 09:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/2024/01-15-tmux-scheduling/</guid>
      <description>Tmux is one of my favorite utilities: it&amp;rsquo;s a terminal multiplexer that lets you create persistent shell sessions, panes, windows, etc. all within a single terminal. It&amp;rsquo;s a great way to organize your shell sessions and natively give you multi-shell environments to work in without having to rely on a terminal program for those features.
You&amp;rsquo;d think in a world of modern applications and fancy terminals like iTerm 2 and Kitty, you wouldn&amp;rsquo;t need such a utility.</description>
      <content:encoded><![CDATA[<p>Tmux is one of my favorite utilities: it&rsquo;s a terminal multiplexer
that lets you create persistent shell sessions, panes, windows, etc. all within a single
terminal. It&rsquo;s a great way to organize your shell sessions and natively give you
multi-shell environments to work in without having to rely on a terminal program for those features.</p>
<p>You&rsquo;d think in a world of modern applications and fancy terminals
like iTerm 2 and Kitty, you wouldn&rsquo;t need such a utility. But time and time again,
tmux has proven itself to be a powerful and essential tool.
Especially when working with remote machines in the cloud or across SSH sessions,
tmux is critical in maintaining my organization and getting things done.</p>
<p>Beyond multiplexing, tmux has some incredible capabilities that extend its functionality
to be able to run and schedule jobs, automatically execute scripts within given contexts,
and much more.</p>
<p>Let&rsquo;s look at a few use cases where we can schedule jobs to run
and even create a whole production like environment, all organized and managed from tmux!</p>
<h2 id="running-commands">Running commands</h2>
<p>Tmux offers a way to run scripts in new sessions automatically:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>tmux new -s my-session -c /path/to/directory <span style="color:#e6db74">&#39;echo &#34;Hello Tmux!&#34; &amp;&amp; sleep 100&#39;</span>
</span></span></code></pre></div><p>Let&rsquo;s break this down: this arbitrary example creates a new session named &ldquo;my-session&rdquo;,
sets the session directory using the <code>-c</code> flag, and then executes a command.</p>
<p>This command will echo &ldquo;Hello Tmux!&rdquo; and then sleep for 100 seconds.</p>
<p>When running this tmux command, we are automatically attached to the session and see
&ldquo;Hello Tmux!&rdquo; printed at the top of the screen and then the <code>sleep</code> command takes over.
Once the <code>sleep</code> command is done, the session exits.</p>
<p>If we wanted to run this in the background, we could provide the <code>-d</code> flag: this will
keep the new session detached and run the given commands behind the scenes in the background.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>$ tmux new -s my-session -d -c ~/workspace &#39;echo &#34;hello world!&#34; &amp;&amp; sleep 1000&#39;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ tmux ls
</span></span><span style="display:flex;"><span>my-session: 1 windows (created Mon Jan 15 11:02:21 2024)
</span></span></code></pre></div><p>Using <code>tmux ls</code> we can list out the current sessions and see <code>my-session</code> is running with 1 window in the background.
This is part of the power of tmux: you can have sessions exist and persist <em>outside</em>
of the current shell or session you are attached to. The sky is really the limit here
and using multiple sessions, windows, and panes has become a cornerstone of my workflows.</p>
<p>If we wanted to attach to the session and see the progress of the command we gave it, we could run <code>tmux a -t my-session</code>.
This will attach to the session named <code>my-session</code>.</p>
<h2 id="persisting-sessions">Persisting sessions</h2>
<p>This is all great, but not all that useful when need to latter observe the results of our command or persist the history:
running a script for a new session or window or pane will automatically close once it&rsquo;s completed.</p>
<p>Instead, we can use a regular session we create and send it some commands remotely:</p>
<p>As an example, let&rsquo;s say we needed to run some tests in the background on our Typescript project with <code>npm run test</code>
and latter observe the results. We can do this with the <code>send-keys</code> command for sessions.
Here, I&rsquo;ll be using the OpenSauced API as my playground:</p>
<ol>
<li>Create a new named session:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># Create a new named, detached session</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># that starts in the given directory</span>
</span></span><span style="display:flex;"><span>tmux new -s my-npm-tests -d -c ~/workspace/opensauced/api
</span></span></code></pre></div><ol start="2">
<li>Send the command</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># Send the test command to the session</span>
</span></span><span style="display:flex;"><span>tmux send-keys -t my-npm-tests <span style="color:#e6db74">&#34;npm run test&#34;</span> Enter
</span></span></code></pre></div><p>A few things to note here:</p>
<p><code>Enter</code> uses the special &ldquo;key binding syntax&rdquo; for sending a literal <code>Enter</code> key
at the end of the command. If we needed to send something else, like &ldquo;control c&rdquo;,
we could do that with <code>C-c</code> or <code>M-c</code> for &ldquo;alt c&rdquo;. Check the official man page
where this has <a href="http://man.openbsd.org/OpenBSD-current/man1/tmux.1#KEY_BINDINGS">a full description</a>
of what&rsquo;s possible with sending key bindings to sessions.</p>
<ol start="3">
<li>Attach to the session:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>tmux a -t my-npm-tests
</span></span></code></pre></div><p>Now that we&rsquo;ve sent our test command to the session, at any point in the future we can attach to the session to see
how it did and check the results. Since the session will be persisted after the
command has run, there&rsquo;s no rush to observe the results! The shell&rsquo;s full history for that session will be right there when we need it!</p>
<ol start="4">
<li>Check results</li>
</ol>
<p>Within the attached session, we can see the full history of the <code>npm</code> command
that was sent and check the results! This session is persisted so we can use the shell
from this session to do additional work, detach, close it, etc.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>$ npm run test
</span></span><span style="display:flex;"><span>npm info using npm@9.6.7
</span></span><span style="display:flex;"><span>npm info using node@v18.17.1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&gt; @open-sauced/api@2.3.0-beta.2 test
</span></span><span style="display:flex;"><span>&gt; jest
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>npm info ok
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$
</span></span></code></pre></div><h2 id="script-it">Script it!</h2>
<p>What if there are 5 or 6 things I want to do behind the scenes?
Maybe I have a build and test process that can run many things in parallel at once?
Instead of using <code>send-keys</code> manually, let&rsquo;s create a small script that can do this all for us!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create named, detached sessions</span>
</span></span><span style="display:flex;"><span>tmux new -s npm-test -d -c ~/workspace/opensauced/api
</span></span><span style="display:flex;"><span>tmux new -s npm-build -d -c ~/workspace/opensauced/api
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Send commands to the detached sessions</span>
</span></span><span style="display:flex;"><span>tmux send-keys -t npm-test <span style="color:#e6db74">&#34;npm run test&#34;</span> Enter
</span></span><span style="display:flex;"><span>tmux send-keys -t npm-build <span style="color:#e6db74">&#34;npm run build&#34;</span> Enter
</span></span></code></pre></div><p>Running this script yields the following tmux sessions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>❯ tmux ls
</span></span><span style="display:flex;"><span>npm-build: 1 windows (created Mon Jan 15 11:31:28 2024)
</span></span><span style="display:flex;"><span>npm-test: 1 windows (created Mon Jan 15 11:31:28 2024)
</span></span></code></pre></div><p>and can be attached to in order to inspect the results of each command.</p>
<p>If the commands to run within individual sessions is more complex than just a sole one liner,
<code>send-keys</code> can also run a script or <code>make</code> command!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>tmux send-keys -t kubernetes <span style="color:#e6db74">&#34;make build&#34;</span> Enter
</span></span></code></pre></div><p>In this article, I&rsquo;m assuming you always want to create a new session.
But many of the same rules, flags, and syntaxes also apply to creating new windows, panes, etc.
Tmux has a strong paradigm that is consistent across different ways to multi-plex shells
so it&rsquo;d be just as simple to create 2 windows instead of two panes that we then send commands to:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create named windows</span>
</span></span><span style="display:flex;"><span>tmux new-window -n npm-test -d -c ~/workspace/opensauced/api
</span></span><span style="display:flex;"><span>tmux new-window -n npm-build -d -c ~/workspace/opensauced/api
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Send commands to the detached sessions</span>
</span></span><span style="display:flex;"><span>tmux send-keys -t 0:npm-test <span style="color:#e6db74">&#34;npm run test&#34;</span> Enter
</span></span><span style="display:flex;"><span>tmux send-keys -t 0:npm-build <span style="color:#e6db74">&#34;npm run build&#34;</span> Enter
</span></span></code></pre></div><p>A few things to note here: instead of <code>-s</code> for the session name, we provide <code>-n</code> for the new window name.
You&rsquo;ll also notice the <code>send-keys</code> syntax now includes a <code>:</code>. The first part is the name of the session (in my case, session named <code>0</code>)
and the name of the window to send the keys to.</p>
<h3 id="setting-env-variables-for-sessions">Setting env variables for sessions</h3>
<p>An important and powerful thing to remember here is environment variables: tmux provides the ability to
denote global environment variables (env vars available to all new sessions)
and session based env vars. In newer versions of tmux, I recommend setting the local session
variable with the <code>-e</code> flag:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>tmux new -s my-session -d -e MYVAR<span style="color:#f92672">=</span>myvalue -c /dir
</span></span></code></pre></div><p>This session named <code>my-session</code> will have access to the <code>MYVAR</code> environment variable we provided when creating the new session:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>$ echo $MYVAR
</span></span><span style="display:flex;"><span>myval
</span></span></code></pre></div><h2 id="scheduling-jobs-with-at-and-scripts">Scheduling jobs with <code>at</code> and scripts</h2>
<p>One of the more powerful things I&rsquo;ve used this all for is local job scheduling.
Let&rsquo;s look at 2 examples using <code>at</code> and scripts:</p>
<h4 id="one-off-at-scheduling">One off <code>at</code> scheduling</h4>
<p><code>at</code> is a very basic command line utility that comes packaged with many desktop
Linux distros and lets you do very simple one off scheduling.</p>
<p>For example, let&rsquo;s say that you needed to do a git push 3 hours from now in a specific directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>tmux new -d -s git-push-later <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -c /path/to/your/repo <span style="color:#e6db74">&#39;echo &#34;git push&#34; | at now + 3 hours&#39;</span>
</span></span></code></pre></div><p>This will create a new detached session named <code>git-push-later</code> within the directory for your git repo
and it sends <code>git push</code> to the <code>at</code> command via a pipe with the argument &ldquo;now + 3 hours&rdquo;.</p>
<p>Looking at scheduled jobs via <code>at</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>$ at -l
</span></span><span style="display:flex;"><span>1       Mon Jan 15 14:46:00 2024
</span></span></code></pre></div><p>I can see there is a scheduled job! Cool!! This isn&rsquo;t <em>too</em> much different than
just running <code>at</code> manually from the given current directory, but it can be really useful and powerful
if I&rsquo;m working in a different directory or need to quickly load up some env vars.
Better yet, you can easily combine this into a script that loads some global tmux environments
to then execute many <code>at</code> commands in sequence.</p>
<h3 id="shell-script-scheduling">Shell script scheduling</h3>
<p>There are <em>alot</em> of ways in Linux to do what I&rsquo;m suggesting here, primarily through <code>cron</code> and <code>crontab</code>
but sometimes for a quick and dirty job that needs to run on repeat every so often in a background shell,
it can be quick and dirty to just wrap what I&rsquo;m doing in a loop with a sleep command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#66d9ef">while</span> true; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># The command to continously run</span>
</span></span><span style="display:flex;"><span>    npm run test
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Sleep for 5 minutes between runs</span>
</span></span><span style="display:flex;"><span>    sleep 5m
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><p>This can then be thrown in a script and executed via a tmux <code>send-keys</code> command like we&rsquo;ve seen:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>tmux send-keys -t my-npm-tests <span style="color:#e6db74">&#34;./run-tests-every-5-mins.sh&#34;</span> Enter
</span></span></code></pre></div><p>Why do it this way and not just have a cron job in the background?</p>
<p>For observable things, like builds, tests, etc., I really like to have a persistent
shell session that I can attach to, detach from, and occasionally keep track of.</p>
<p>Usually with this method, these aren&rsquo;t things that are <em>too</em> important, so if the tmux
server dies, it&rsquo;s nothing I can&rsquo;t quickly spin back up with a little tmux script. It&rsquo;s nice having a sort of &ldquo;location&rdquo;
where these jobs are running in the background but always reachable from a different tmux window or tab.
I sometimes find I&rsquo;ve lost track of things Linux abstracts away with <code>cron</code>, <code>systemd</code>, etc.
(which is generally a good thing: I don&rsquo;t want to have to think about the things <code>systemd</code> is managing!)
So, instead, for the little things I need to keep an eye on, I choose to keep track of them in a tmux session!</p>
<h2 id="building-production-like-environments">Building production like environments</h2>
<p>Using all of this and with my weird tendency to keep track of things in tmux sessions,
let&rsquo;s build a simple production like environment using a starter script,
docker, and a few tmux sessions!</p>
<p>Let&rsquo;s again look at an OpenSauced example: this starts a postgres database in docker,
boots up the API (which will then attach to that database), and then starts the frontend:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create named, detached sessions</span>
</span></span><span style="display:flex;"><span>tmux new -s database -d -c ~/workspace/opensauced/api
</span></span><span style="display:flex;"><span>tmux new -s api -d -c ~/workspace/opensauced/api
</span></span><span style="display:flex;"><span>tmux new -s frontend -d -c ~/workspace/opensauced/app
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Start the database up</span>
</span></span><span style="display:flex;"><span>tmux send-keys -t database <span style="color:#e6db74">&#34;docker run -it --rm --name database -p 25060:5432 my_postgres_image:latest&#34;</span> Enter
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Start the API</span>
</span></span><span style="display:flex;"><span>tmux send-keys -t api <span style="color:#e6db74">&#34;npm run start&#34;</span> Enter
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Start the frontend app</span>
</span></span><span style="display:flex;"><span>tmux send-keys -t frontend <span style="color:#e6db74">&#34;npm run start&#34;</span> Enter
</span></span></code></pre></div><p>Horrifying, I know.</p>
<p>But surprisingly, I&rsquo;ve found this to be a really great way to keep the various
components of our system organized in a system I know well and can easily wrap my head around.</p>
<p>Then, when I&rsquo;m done with this environment, I can easily tear it down by stopping the tmux sessions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>tmux kill-session database
</span></span><span style="display:flex;"><span>tmux kill-session api
</span></span><span style="display:flex;"><span>tmux kill-session frontend
</span></span></code></pre></div><p>And that&rsquo;s it! Easy organization, job scheduling, and multi-tasking with tmux!</p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    <item>
      <title>2023 in review</title>
      <link>//localhost:1313/posts/2024/01-01-in-review/</link>
      <pubDate>Mon, 01 Jan 2024 09:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/2024/01-01-in-review/</guid>
      <description>I had a huge year.
And every year, around this time, when I have a well deserved opportunity to take a break and prepare for the next year, I like to reflect: think on the year&amp;rsquo;s accomplishments, derive some lessons learned, and drink in everything from my experiences.
Herein are my musings and thoughts regarding the last year.
Leaving AWS I still think about my time at AWS: it was a short, but very sweet and formative period for me.</description>
      <content:encoded><![CDATA[<p>I had a huge year.</p>
<p>And every year, around this time, when I have a well deserved opportunity to
take a break and prepare for the next year, I like to reflect:
think on the year&rsquo;s accomplishments, derive some lessons learned, and drink in everything from my experiences.</p>
<p>Herein are my musings and thoughts regarding the last year.</p>
<h2 id="leaving-aws">Leaving AWS</h2>
<p>I still think about my time at AWS:
it was a short, but very sweet and formative period for me.
Out of the ashes of the Broadcom / VMware acquisition news,
an announcement that many felt was deeply misaligned with VMware&rsquo;s Kubernetes vision,
I went searching for something else in mid 2022.
When I eventually joined the Amazon Linux and Bottlerocket team, I felt I had found a new home among people I related to:
peers who were passionate and deeply curious about programming, the art of computer science, and Linux.</p>
<p>But something I&rsquo;ve come to grips with, and continue to digest since leaving,
is just how burned out I actually was at AWS.
The team was amazing, I got to work in Rust every single day, I was surrounded by individuals I looked up to and respected,
and I was living my dream of building a Linux distribution in the open source.
And yet, expectations were lofty. There was little room for error.
Constant shifting organizational priorities. Leadership re-orgs.
And a new, ambiguous return to office policy with the looming potential of having to eventually move to Seattle.
It was a very befuddling decision to me: the entire Bottlerocket team was distributed all around the world.
Why &ldquo;return to team&rdquo; when the team was fully remote and async to begin with?</p>
<p>All of that <em>and</em> I was coming off a relatively high pressure team at VMware shipping
(<a href="https://github.com/vmware-tanzu/community-edition">and eventually deprecating</a>) TCE.</p>
<p><em>&ldquo;Customer obsession&rdquo;</em> is probably Amazon&rsquo;s deepest principle.
And it&rsquo;s embodied well throughout AWS:
people legitimately care about shipping the best stuff for customers
and delighting them with their work.
But for the individual contributor, like me, leadership can wield it
as justification to push beyond the bounds of what good work life balance is.</p>
<p>But, in the end, my burnout was no one&rsquo;s fault exactly: sometimes these things just happen from a stint of bad luck.
I joined AWS just before a tumultuous time in the market
where the software engineer career path would drastically contract,
layoffs would abound,
and the pressure would be on for teams to ship real value that made their engineering headcount make sense.
I was thankful to still have a job but
I also could have done a much better job of setting clear work / life boundaries
and finding balance: one of the tricky things I&rsquo;m learning as I grow deeper into my tech career
is that, while I <em>deeply</em> love and enjoy what I do,
<em>&ldquo;variety is the spice of life&rdquo;</em> and finding a balance <em>outside</em> of tech is key to having a fruitful
and enjoyable long term tech career.</p>
<p>I&rsquo;m very proud of alot of the work I did at AWS: there were some <em>really</em> tricky problems to solve. Here is some of the work I&rsquo;m most proud of at AWS over the last year:</p>
<ul>
<li><a href="https://github.com/bottlerocket-os/bottlerocket-update-operator/pull/325">v1.0.0 GA release of the Bottlerocket update-operator</a>: this was a pretty huge undertaking. When I first joined the Bottlerocket team, there was a big backlog of things that needed to be fixed in the kubernetes update operator before we could consider it GA. For those curious, the Bottlerocket update-operator, or more affectionately called &ldquo;brupop&rdquo;, is a kubernetes operator system for automatic and continuous upgrade of Bottlerocket host nodes in a kubernetes cluster: this is great because someone operating a k8s cluster with Bottlerocket nodes will almost always want to consume the latest changes from our distro stream. These upgrades often included security patches and performance improvements. In order to cut this as GA, there were a number of huge refactors that needed to go in (including a deep dive on <a href="https://github.com/bottlerocket-os/bottlerocket-update-operator/pull/340">enabling mTLS between our API and operator pods</a>, <a href="https://github.com/bottlerocket-os/bottlerocket-update-operator/pull/401">removing a long standing transient dependency on <code>openssl</code></a>, and <a href="https://github.com/bottlerocket-os/bottlerocket-update-operator/pull/350">refactoring massive amounts of code to enable the use of <code>helm</code></a> (which customers really wanted). <em>Huge</em> shoutout to my counterpart, <a href="https://github.com/gthao313">Tianhao</a>, for partnering on this massive achievement with me and the team! I learned alot from working with you!!</li>
<li><a href="https://github.com/bottlerocket-os/bottlerocket/pull/2378">Vending go modules using the custom Bottlerocket <code>buildsys</code></a>: the Bottlerocket <code>buildsys</code> is a mechanism to build the Bottlerocket operating system artifacts. Much easier said then done: because of Bottlerocket&rsquo;s unique security constraints, use of <code>selinux</code>, and containerization paradigm, we had to find ways to consume upstream files (often in RPMs) in a reproducible manner where we could be assured source files had not been tampered with. Several Go modules were used throughout the OS which presented unique contraints when consuming and building those targets. This PR enabled Go modules to be vendored, checked, consumed, and built, all from within our internal build system: while this was early work, it set the stage for my presence on the team. After this, I felt I became the sort of &ldquo;Go guy&rdquo; and I often fielded bumping the version of Go we built with when new security releases were dropped, owning a few of our bespoke first party Go modules, working with internal Go teams to get new features and fixes into Bottlerocket when necessary, and much more. Amazon has a very healthy Go ecosystem and I&rsquo;m excited to see what the teams do with it in the future!</li>
</ul>
<h4 id="lesson">Lesson:</h4>
<p>Recognize the cinders of burnout before it becomes an all consuming flame. And do what you need to do in your life to find balance.
Sometimes things happen. And you can&rsquo;t always control them: what you can control is how you react.</p>
<h2 id="joining-opensauced">Joining OpenSauced</h2>
<p>Serendipitously, early in 2023, I had connected with <a href="https://twitter.com/bdougieYO">bdougie</a>,
CEO of OpenSauced, the self proclaimed <a href="https://thenewstack.io/after-github-brian-douglas-builds-an-open-source-startup/"><em>&ldquo;Beyonce of open source&rdquo;</em></a>. We chatted a few times and I realized his vision for building tooling and platforms <em>for</em> open source maintainers and enablers was exactly what I&rsquo;d been missing <em>in my own</em> personal open source contributions and work in AWS open source.</p>
<p>So many times I found myself asking <em>&ldquo;who exactly is this?&rdquo;</em> or <em>&ldquo;will this project accept contributions ..?&rdquo;</em> or <em>&ldquo;is this project&rsquo;s community a welcoming one?&rdquo;</em> when working in open source.</p>
<p>Joining a very early stage startup is something I&rsquo;ve always wanted to try: you hear these legendary stories of people in the early 90s and 2000s solving huge problems with technology out of their garages (thankfully, we&rsquo;re not running OpenSauced out of bdougie&rsquo;s garage, we&rsquo;re fully remote!)</p>
<p>I followed my gut, trusted my instinct, and joined OpenSauced in mid 2023, leaving behind a very good and comfortable job at AWS: what an incredible decision! Since then, I&rsquo;ve learned <em>alot</em>, been building <em>alot</em> of things, and have shipped a number of big enhancements to our data pipelines, backend infrastructure, frontend, how we approach building metrics and insights around open source contributions, and much more. I deeply believe that in 2024, we will have some incredible things to show off.</p>
<p>Some public OpenSauced work I&rsquo;m most proud of:</p>
<ul>
<li><a href="https://github.com/open-sauced/go-api">Efficiently caching and ingesting git repos</a>: I&rsquo;ve written about this before, but one of the many challenges in building ontop of Git and Git based platforms is how you efficiently pull down new changes from repos (without having to clone the whole thing over and over again. Such a waste!) We needed a mechanism that could introspect individual commits in git repos to then derive insights from: enter the pizza oven, a Go based web server for cloning repos to disc, introspecting commits, and upserting new commits it sees to a database. one of the major efficiency bumps it gets is my implementation of an LRU cache: a caching mechanisms that drops the &ldquo;least used&rdquo; member when the cache is full. I could go <em>very</em>  deep into this project, but i encourage you to read more about it here:
<ul>
<li><a href="https://dev.to/opensauced/caching-git-repos-a-deep-dive-into-opensauceds-pizza-oven-service-49nf">https://dev.to/opensauced/caching-git-repos-a-deep-dive-into-opensauceds-pizza-oven-service-49nf</a></li>
<li><a href="https://dev.to/opensauced/how-we-made-our-go-microservice-24x-faster-5h3l">https://dev.to/opensauced/how-we-made-our-go-microservice-24x-faster-5h3l</a></li>
</ul>
</li>
<li><a href="https://github.com/open-sauced/pizza-cli">The OpenSauced <code>pizza</code> CLI</a>: OpenSauced isn&rsquo;t just a web app for metrics and insights. It&rsquo;s a software platform that is made to enable people building and consuming in the open. One thing we recognized was missing from our suite of tools is a CLI: the <code>pizza</code> CLI is a Go, Cobra based CLI that integrates with the OpenSauced API, bringing deeper capabilities to people who want to integrate OpenSauced into their CI/CD pipelines, scripts, or internal reporting tools.
<ul>
<li>Shipping an OpenSauced Go client: alongside the OpenSauced CLI is <a href="https://github.com/open-sauced/go-api">a Go based client for the OpenSauced API</a>. This enables <em>anyone</em> using Go to build ontop of our API and integrate deeply with our platform.</li>
</ul>
</li>
<li>Integrating realtime, events driven data into OpenSauced: the cat&rsquo;s <em>abit</em> out of the bag on this one, and there is <em>so</em> much more to come, but I&rsquo;ve been heads down over the last month or so shipping new infrastructure and data pipelines to integrate GitHub&rsquo;s realtime events data into OpenSauced. Much of this is possible through the magic of the Timescale time series database: this gives us the power of leveraging Postgres <em>alongside</em> time series events data from GitHub. <a href="https://github.com/open-sauced/app/pull/2293">Check out the initial integration</a> and be on the lookout for some <em>really</em> incredible improvements to the platform through these new mechanisms.</li>
</ul>
<h4 id="lesson-1">Lesson:</h4>
<p>In 1994, Jeff Bezos took a huge leap of faith, quit his well paying, comfortable job in New York City <a href="https://www.aboutamazon.com/news/policy-news-views/statement-by-jeff-bezos-to-the-u-s-house-committee-on-the-judiciary">to start Amazon</a>: <em>&quot;&hellip; I decided that if I didn’t at least give it my best shot, I was going to regret not trying to participate in this thing called the internet that I thought was going to be a big deal&quot;</em>.</p>
<p>Take a leap of faith once in awhile. Trust your gut, take that opportunity, especially if you&rsquo;ve always wanted to and it makes sense.</p>
<h2 id="cobra">Cobra</h2>
<p>In 2023, along with the help of the amazing Go and Cobra community, <a href="https://github.com/spf13/cobra/releases">we shipped 2 massive cobra releases</a>:
even while taking a break from maintaining Cobra,
I found it deeply rewarding to give back to the community
and continue maintenance of this incredibly important project.</p>
<p>Here are some of my favorite things we shipped in Cobra this last year:</p>
<ul>
<li>Support for usage of Cobra as a meta &ldquo;plugin&rdquo; framework: many tools, like <code>kubectl</code>
can have &ldquo;plugins&rdquo; that you add to the top level CLI. These then get consumed through that top level CLI
as a nice and comprehensive silo for your <code>kubectl</code> needs.
We did something <em>very</em> similar with the <code>tanzu</code> CLI (although we built alot of custom software to make it work),
this now has much better support directly in Cobra for plugin completions, command paths, etc.</li>
<li>Completions support keeps getting better: <code>powershell</code> 7.2+ is now supported, there&rsquo;s better
support for <code>bash</code>, <code>zsh</code>, and <code>fish</code>, and we shipped <em>many</em> fixes to improve the overall
quality of life when using completions and writing CLIs for completions.</li>
</ul>
<p>Here&rsquo;s to much more cobra joy in 2024!!</p>
<h4 id="lesson-2">Lesson:</h4>
<p>Taking breaks is a good thing. Come back to what brings you joy.</p>
<h2 id="deeper-into-neovim">Deeper into Neovim</h2>
<p>Part of me wondered when I joined AWS if my workflows in Neovim would be able to scale and keep up: TLDR, they did and they still do. Although, it required some continous tweaking.</p>
<p>Here are a few of my favorite little tidbits of neovim goodness from 2023:</p>
<ul>
<li><a href="https://github.com/williamboman/mason.nvim"><code>mason.nvim</code></a>: Mason is what I personally would consider
one of Neovim&rsquo;s most important 3rd party projects. It would not surprise me if it eventually was
integrated directly into Neovim itself. Mason is a sort of manager of editor tooling, primarily
LSP servers, linters, formaters, and the like. It provides a thin, simple interface for
installing, managing, upgrading, and integrating with those tools.
You might not think this is a big deal (&quot;<em>another</em> package manager??&quot;),
but when you think about the effort and pain of setting up a new neovim environment
(having to manually install and integrate <code>gopls</code> for Go development,
having to manually install and integrate <code>cargo</code> for rust development,
having to manually install and integrate <code>eslint</code> for Typescript development, etc. etc.),
you realize that there is <em>alot</em> of 3rd party tooling you rely on. Using <code>mason.nvim</code> makes it so simple and easy.</li>
<li><a href="https://github.com/stevearc/oil.nvim"><code>oil.nvim</code></a>: Many people are familiar with <code>vim-vinegar</code>, a <code>netrw</code> enhancement for file explorering in vim.
<code>oil.nvim</code> takes that concept and expands on it providing the ability to edit your filesystem
<em>in a normal nvim buffer</em>. For a long time, I had been using a seperate tmux pane to do file system edits
with <code>mv</code>, <code>cp</code>, and all the other traditional linux utilities. It was fine, but I really was missing
the speed and power that <code>oil.nvim</code> gives you. This was sort of one of those things I didn&rsquo;t know
I was missing until I started using it but wow has it enhanced my workflow greatly. Highly, highly recommended!</li>
<li><a href="https://github.com/jpmcb/nvim-llama"><code>nvim-llama</code></a>: I built a small, basic plugin that integrates Ollama docker containers (see the LLM section below) into neovim.
I really love the idea of using <em>local</em> large language models and not ones as part of services:
maybe it&rsquo;s my dogmatic, Stallman view of open source software and services out in the wild,
gut this was a great exercise in building a neovim plugin, letting the world know about it,
and getting some really good feedback to improve its usage.</li>
</ul>
<h4 id="lesson-3">Lesson</h4>
<p>Building good habits around things that improve your workflow is an investment I&rsquo;m still greatly benefiting from.
Take the time to know your tooling very well: these are compounding skills that can be applied to a wide range of disciplines.</p>
<h2 id="using-llms">Using LLMs</h2>
<p>I was pretty skeptical of AI technology towards the end of 2022:
could Large Language Models and their interfaces, like ChatGPT, really become apart of my workflows?</p>
<p>I think I&rsquo;ve surprised myself: in some ways, using LLMs has indeed become a huge part of my workflows.
My original, fear based assumption that this meant I&rsquo;d no longer be able to write as much code as before was baseless:
it&rsquo;s a tool, just like anything else. And if anything, it&rsquo;s allowed me to write <em>more</em> code.
But I&rsquo;ve hit many of the snags with using LLMs: I&rsquo;ve gotten some nasty hallucinations and
I&rsquo;ve found areas that LLMs just don&rsquo;t know about (for example, in early 2023, LLM&rsquo;s rust knowledge was pretty poor).
Still, I&rsquo;ve found it to be a really useful tool and almost essential to quickly discovering new knowledge.</p>
<p>Here&rsquo;s how I used LLMs in 2023:</p>
<ul>
<li>Subscribed to ChatGPT plus. A month or so latter, canceled.</li>
<li>Used Google&rsquo;s Bard on occasion: Google definitely seems to have some of the best training data (this shouldn&rsquo;t be a surprise to anyone).</li>
<li>Started using <a href="https://github.com/ggerganov/llama.cpp/">local LLMs with <code>llama.cpp</code> </a> and Meta&rsquo;s Llama 2 and Code Llama models.</li>
<li>Started using <a href="https://github.com/jmorganca/ollama">Ollama</a> in Docker for a seamless DX and user experience. Much easier to integrate a docker container.</li>
<li>Use <a href="https://huggingface.co/chat/">https://huggingface.co/chat/</a> to experiment with open source, unfiltered, cutting edge models.</li>
</ul>
<h4 id="lesson-4">Lesson</h4>
<p>The biggest shift in my mental paradigm around LLMs is that running them locally
is actually not as bad as you&rsquo;d think: Apple&rsquo;s newest M chipsets are honestly powerhouses
and I&rsquo;ve had amazing results with some of the 7B and 13B parameter models:
I believe the future of open source AI technology is very bright and I hope
it grows to rival that of major tech companies building this technology on proprietary software.
Long live the open source movement!! And long live open source LLMs!</p>
<h2 id="social-media">Social media</h2>
<p>I still don&rsquo;t know what the hell I&rsquo;m doing with social media: some days it feels like a huge burden,
something I <em>have</em> to do in order to stay engaged with people in the tech communities I&rsquo;m apart of.</p>
<p>Other days, I feel so thankful to live at a time in history when I can connect with other technologists,
scientist, and engineers around the world seamlessly.</p>
<p>I&rsquo;m not sure if it&rsquo;s a curse upon society or a blessing: but one thing I&rsquo;ve realized,
somewhere through the torrent of tiktok videos I&rsquo;ve consumed, at least for me, anything
more than very mild social media consumption is a detriment to my well-being.</p>
<p>I&rsquo;m certain that being burned out at AWS was in some ways due to my social media use:
it was hard to not doom scroll news about layoffs, the stock market, or the waning tech job field.
It was hard to not see viral posts like <em>&ldquo;how I became a 10x engineer&rdquo;</em> or <em>&ldquo;how I made 1 million dollars as a software engineer&rdquo;</em>.
Eventually, unconsciously, those words start to change your mindset.
And overall, it just made me discontent: this all reminds me of the famous Theodore Roosevelt quote:</p>
<blockquote>
<p>Comparison is the thief of joy.</p>
</blockquote>
<h4 id="lesson-5">Lesson</h4>
<p>Mass social media consumption isn&rsquo;t good for me. I&rsquo;m still figuring a balance out, but for now, to start,
I&rsquo;m limiting social media access on my phone.</p>
<hr>
<p>Here&rsquo;s to many more years!
Good luck in the new year!!</p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    <item>
      <title>4 billion Go if statements</title>
      <link>//localhost:1313/posts/2023/12-28-4-billon-go-if-statements/</link>
      <pubDate>Thu, 28 Dec 2023 09:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/2023/12-28-4-billon-go-if-statements/</guid>
      <description>I recently read this excellent little bit of programming horror titled: &amp;ldquo;4 billion if statements&amp;rdquo;.
It chronicles how one could use an insane number of hard coded if statements to check if any given 32 bit number is even or odd. Instead of do this the normal and efficient way with a modulus operator and for loop, hard coding if statements requires some clever meta programming, some custom assembly code, and a nearly 40 GB compiled binary for all the comparisons.</description>
      <content:encoded><![CDATA[<p>I recently read <a href="https://andreasjhkarlsson.github.io/jekyll/update/2023/12/27/4-billion-if-statements.html">this <em>excellent</em> little bit of programming horror</a>
titled: <em>&ldquo;4 billion if statements&rdquo;</em>.</p>
<p>It chronicles how one could use an <em>insane</em> number of hard coded if statements
to check if any given 32 bit number is even or odd. Instead of do this the normal
and efficient way with a modulus operator and <code>for</code> loop,
hard coding if statements requires some clever meta programming,
some custom assembly code, and a nearly 40 GB compiled binary for all the comparisons.</p>
<p>This all got me thinking:
<em>&ldquo;Could you do this in Go? What sort of limitations are there with the Go compiler?&rdquo;</em></p>
<p>Much like the original, I started with a very simple Go program and 10 <code>if</code> comparisons:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;strconv&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">arg</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">arg</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> {
</span></span><span style="display:flex;"><span>                panic(<span style="color:#e6db74">&#34;argument must be provided&#34;</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">num</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">ParseUint</span>(<span style="color:#a6e22e">arg</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">64</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>                panic(<span style="color:#e6db74">&#34;could not parse argument as int64&#34;</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">num</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> {
</span></span><span style="display:flex;"><span>                println(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;%d is odd&#34;</span>, <span style="color:#a6e22e">num</span>))
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">num</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> {
</span></span><span style="display:flex;"><span>                println(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;%d is even&#34;</span>, <span style="color:#a6e22e">num</span>))
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">num</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span> {
</span></span><span style="display:flex;"><span>                println(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;%d is odd&#34;</span>, <span style="color:#a6e22e">num</span>))
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// etc. etc.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>Pretty simple! It gets the argument to the program, parses it as an <code>uint64</code> integer,
and then goes through all the comparisons one by one.</p>
<p>And it works flawlessly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>$ go run main.go 8
</span></span><span style="display:flex;"><span>8 is even
</span></span></code></pre></div><p>In order to extend this <em>beyond</em> what I am humanly capable of doing by hand and what I want to spend the rest of my life doing,
(if I was to write out each <code>if</code> statement by hand, and it took me 1/2 a second each time,
in order to write out all 32 bit numbers,
it would take me roughly 292471207.5 millennium to complete)
we should also take advantage of some meta programming. Let the computers do the boring stuff quickly!</p>
<p>Here&rsquo;s a simple bash script I came up with to drop in some Go code
for us to try and compile:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># The initial boilerplate for the Go program in a heredoc</span>
</span></span><span style="display:flex;"><span>cat <span style="color:#e6db74">&lt;&lt; EOF &gt; main.go
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">package main
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">import (
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;fmt&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;os&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;strconv&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">func main() {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        arg := os.Args[1]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if arg == &#34;&#34; {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                panic(&#34;number argument must be provided&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        num, err := strconv.ParseInt(arg, 10, 64)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if err != nil {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                panic(&#34;could not parse argument as int64&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># A few variables to control the meta programming flow</span>
</span></span><span style="display:flex;"><span>END<span style="color:#f92672">=</span><span style="color:#ae81ff">1000</span>
</span></span><span style="display:flex;"><span>ISEVEN<span style="color:#f92672">=</span>false
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Loop through all values, flipping a flag back and forth (since we&#39;re not</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># using the modulus operator to make even/odd comparisons)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#f92672">((</span>i<span style="color:#f92672">=</span>1; i&lt;<span style="color:#f92672">=</span>END; i++<span style="color:#f92672">))</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $ISEVEN <span style="color:#f92672">=</span> true <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>        cat <span style="color:#e6db74">&lt;&lt; EOF &gt;&gt; main.go
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if num == $i {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                println(fmt.Sprintf(&#34;%d is even&#34;, num))
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span><span style="display:flex;"><span>        ISEVEN<span style="color:#f92672">=</span>false
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        cat <span style="color:#e6db74">&lt;&lt; EOF &gt;&gt; main.go
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if num == $i {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                println(fmt.Sprintf(&#34;%d is odd&#34;, num))
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span><span style="display:flex;"><span>        ISEVEN<span style="color:#f92672">=</span>true
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Close out the main go program</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;}&#34;</span> &gt;&gt; main.go
</span></span></code></pre></div><p>This uses one of my favorite bash features, the &ldquo;heredoc&rdquo;, in order to drop
large string chunks (in this case, Go code) into a file.
Note that this only goes up to 1000 if statements <em>(for now &hellip;)</em>: we&rsquo;ll slowly increase the number of if statements
to see if we can hit any kind of ceiling or limitation.</p>
<p>After running the bash script, let&rsquo;s build the generated, meta go code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>CGO_ENABLED<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> go build -gcflags<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;-N&#34;</span> -a main.go
</span></span></code></pre></div><p>This instructs the Go toolchain (which includes a <code>gc</code> compiler) to do the following:</p>
<ul>
<li>Disable <code>gc</code> optimizations with <code>-N</code>: we don&rsquo;t want the underlying compiler to make
any changes to our meta code through compiler trickery.</li>
<li>Disable <code>cgo</code> from require a locally linkable C toolchain: I.e., this builds a sole, statically linked binary.</li>
<li>Always build the program, no matter if it&rsquo;s already been built with the <code>-a</code> flag</li>
</ul>
<p>This produces a single <code>main</code> binary that we can run some tests against:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>$ ./main 500
</span></span><span style="display:flex;"><span>500 is even
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ ./main 677
</span></span><span style="display:flex;"><span>677 is odd
</span></span></code></pre></div><p>Great! Things seem to be working!!</p>
<p>Now, since we know 1000 if statements works, let&rsquo;s try to scale this up abit:
like the original post, let&rsquo;s go up to 16 bit integers
(which should be 65536 <code>if</code> statements):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">((</span>END<span style="color:#f92672">=</span>2**16<span style="color:#f92672">))</span>
</span></span></code></pre></div><p>This was <em>abit</em> slower and took just under 2 mins:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>$time ./meta.bash
</span></span><span style="display:flex;"><span>./meta.bash  18.39s user 65.09s system 78% cpu 1:45.79 total
</span></span></code></pre></div><p>and resulted in a <code>main.go</code> file that is over 100,000 lines of code and <code>5.6M</code> big.</p>
<p>After building, let&rsquo;s test it out:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>$ ./main 65536
</span></span><span style="display:flex;"><span>65536 is even
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ ./main 6553
</span></span><span style="display:flex;"><span>6553 is odd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ ./main 32322
</span></span><span style="display:flex;"><span>32322 is even
</span></span></code></pre></div><p>Excellent! Now, onward to the 32 bit integer holy grail and over 4 billion if statements!!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">((</span>END<span style="color:#f92672">=</span>2**32<span style="color:#f92672">))</span>
</span></span></code></pre></div><p>At first, I let this ignorantly run <em>all night</em> only to come back and find that I had let my bash script
consume all available disc on my Macbook (it only has a 500 GB internal drive): by my estimates, the way I wrote the meta Go code boilerplate,
a single file would be over 300 GB in size. Things crashed around 1 billion <code>if</code> statements (since it couldn&rsquo;t write to disc anymore)
and I was left with nothing to do but delete the file and reclaim the disc space.</p>
<p><em>There must be a better way!!</em></p>
<p>Let&rsquo;s try using external storage: I had a spare 1TB external SSD laying around that I could run this experiment on.
Now, the only thing would be seeing if the read/write speeds on this external drive would be fast enough
resulting in a bottleneck.</p>
<p>Using the bash script, it took just under 10 minutes (conservatively) to write 1 million <code>if</code> statements to the drive:
to reach 4 billion, using this as an anchor point, it will take 40,000 minutes.
Or roughly 27 days to complete. <em>Yikes, the read/write on this old drive is really slow</em>.
For my internal mac storage to reach 1 million <code>if</code> statements, it takes less than 5 seconds.</p>
<p><em>Foiled again!!</em> I was definitely not anticipating disc space and read/write IO being the biggest hurdle here.</p>
<p>Bash is probably <em>not a wise choice</em> at this point: if I want to make the writing to disc
fast and efficient, I probably need something more robust: like Go!</p>
<p>This Go program is more or less the same as the original bash script,
but, with some major improvements: we are using a buffered writer that lets us
make significantly fewer writes to disc with bigger chunks! This speeds
things up significantly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;bufio&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;math&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// The file on my attached &#34;Dark-Star&#34; SSD
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">META_FILE</span> = <span style="color:#e6db74">&#34;/Volumes/Dark-Star/4-billion/main.go&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Delete/truncate existing bits within main.go file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Truncate</span>(<span style="color:#a6e22e">META_FILE</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>                panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// open main.go file for writing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">OpenFile</span>(<span style="color:#a6e22e">META_FILE</span>, <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">O_WRONLY</span>, <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">ModeAppend</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>                panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// close file on exit and check for its returned error
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">defer</span> <span style="color:#66d9ef">func</span>() {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Close</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>                        panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>        }()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Use a buffered writer and periodically flush
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">w</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bufio</span>.<span style="color:#a6e22e">NewWriter</span>(<span style="color:#a6e22e">f</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Initial Go boilerplate
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Write</span>([]byte(<span style="color:#e6db74">`
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">package main
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">import (
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;os&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;strconv&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">func main() {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        arg := os.Args[1]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if arg == &#34;&#34; {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                panic(&#34;number argument must be provided&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        num, err := strconv.ParseInt(arg, 10, 64)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if err != nil {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                panic(&#34;could not parse argument as int64&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">`</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Flush</span>()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>                panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Since we&#39;re still not using modulous operators,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// use a few flags for tracking the number of chunks
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// written to the buffered writer and for even/odd
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">chunks</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">isEven</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Go is nice since it carries constants in the math package
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// for max ints of varying bit width
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">MaxUint32</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span> {
</span></span><span style="display:flex;"><span>                println(<span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// Every 10000 writes to the buffer, flush to the main.go file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#75715e">// Note: this is where the actual write to disc happens
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">chunks</span> &gt; <span style="color:#ae81ff">10000</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Flush</span>()
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>                                panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>                        }
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">chunks</span> = <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">isEven</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#75715e">// chunk for an even number
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                        <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Fprintf</span>(<span style="color:#a6e22e">w</span>, string(<span style="color:#e6db74">`
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if num == %d {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                println(&#34;%d is even&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }`</span>), <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>                                panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>                        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">isEven</span> = <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#75715e">// chunk for an odd number
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                        <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Fprintf</span>(<span style="color:#a6e22e">w</span>, string(<span style="color:#e6db74">`
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if num == %d {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                println(&#34;%d is odd&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }`</span>), <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>                                panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>                        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">isEven</span> = <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">chunks</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Write the last closing bracket for the main function
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Write</span>([]byte(<span style="color:#e6db74">`
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}`</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// flush out any remaining bits and finish up
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Flush</span>()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>                panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In total, this took just over 3 hours to write to my external SSD! Much better!!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>./main  1722.63s user 4116.48s system 49% cpu 3:16:32.52 total
</span></span></code></pre></div><p>and the <code>main.go</code> file on the external SSD ended up being about 350GB:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>$ ll main.go
</span></span><span style="display:flex;"><span>-rwxrwxrwx@ 1 jpmcb  staff   344G Dec 29 15:55 main.go
</span></span></code></pre></div><p>Now, let&rsquo;s compile it!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>$ CGO_ENABLED=0 go build -a main.go
</span></span><span style="display:flex;"><span>command-line-arguments:
</span></span><span style="display:flex;"><span>/opt/homebrew/Cellar/go/1.21.3/libexec/pkg/tool/darwin_arm64/compile:
</span></span><span style="display:flex;"><span>signal: killed
</span></span></code></pre></div><p>&hellip; about an hour latter, it turns out, I don&rsquo;t have <em>quite</em> enough ram to actually compile this monstrosity.</p>
<p>What&rsquo;s going on here? As the Go compiler (and the underlying <code>gc</code> compiler) consume the billions and billions
of lines of Go code, it loads those contexts into memory. I believe this is a similar limitation the original
author ran into when compiling their C code: there&rsquo;s just not enough memory on the system to consume and compile such a massive program.</p>
<p>I considered going down the assembly route:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#a6e22e">cmp</span> <span style="color:#66d9ef">w1</span>, <span style="color:#ae81ff">1</span>     <span style="color:#75715e">; Compare number in the w1 registry with &#34;1&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">b.eg</span> <span style="color:#66d9ef">odd</span>      <span style="color:#75715e">; Print &#34;odd&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cmp</span> <span style="color:#66d9ef">w1</span>, <span style="color:#ae81ff">2</span>     <span style="color:#75715e">; Compare number in the w1 registry with &#34;2&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">b.eg</span> <span style="color:#66d9ef">even</span>     <span style="color:#75715e">; Print &#34;even&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">; ... and many, many more comparisons
</span></span></span></code></pre></div><p>but this would:</p>
<ol>
<li>Essentially replicate Andreas Karlsson&rsquo;s original experiment</li>
<li>Probably be very tedious to do on a Macbook since <em>&ldquo;Darwin function numbers
are considered private by Apple, and are subject to change.&rdquo;</em>
I was able to piece together some of the syscalls through the <a href="https://github.com/apple-oss-distributions/xnu/blob/main/bsd/kern/syscalls.master">XNU bsd kernal syscalls header</a>,
Apple&rsquo;s OSS distribution of the kernel for MacOS and iOS.
But again, this seemed be a relatively fraught effort replicating what&rsquo;s already been done on x86.</li>
</ol>
<h3 id="lessons-learned">Lessons learned:</h3>
<ul>
<li>Building massive Go projects requires an equally massive amount of RAM.</li>
<li>External SSD io read/write times <em>can</em> indeed be a scaling issue:
I had to pivot to a more efficient, chunking strategy when writing the 300+ GB
file to my external drive.</li>
<li>Like any massive scale problem, abit of bubble-gum and duct tape is usually required.</li>
</ul>
<hr>
<h3 id="sidebar-bash-does-not-support-64-bit-wide-ints">Sidebar: bash does not support 64 bit wide ints</h3>
<p>At one point during this journey, I thought that <em>maybe</em>
I could keep these shenanigans going and scale this all
the way up to 64 bit wide ints.</p>
<p>Besides how absolutely <em>huge</em> the source file would be
(the difference between the max 32 bit int and max 64 bit int
is roughly 4 billion times the size: so we can assume the
source file would be 400 GB * 4 billion == 16 million petabytes).
I found there was a tricky soft limit on ints in bash:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">((</span>NUM<span style="color:#f92672">=(</span>2**64<span style="color:#f92672">)))</span>
</span></span><span style="display:flex;"><span>echo $NUM
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 0</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">((</span>NUM<span style="color:#f92672">=(</span>2**64<span style="color:#f92672">)</span> - 1<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>echo $NUM
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># -1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2^64 truly results in zero, not just overflowed back around to 0</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">((</span>NUM<span style="color:#f92672">=(</span>2**63<span style="color:#f92672">)))</span>
</span></span><span style="display:flex;"><span>echo $NUM
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># -9223372036854775808</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># interesting! This seems to overflow</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">((</span>NUM<span style="color:#f92672">=(</span>2**63<span style="color:#f92672">)</span> - 1<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>echo $NUM
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 9223372036854775807</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This seems to be the upper limit of bit width ints in bash</span>
</span></span></code></pre></div><hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    <item>
      <title>There is no secure software supply-chain.</title>
      <link>//localhost:1313/posts/2023/09-02-there-is-no-secure-software-supply-chain/</link>
      <pubDate>Sun, 03 Sep 2023 09:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/2023/09-02-there-is-no-secure-software-supply-chain/</guid>
      <description>Years ago, entrepreneurs and innovators predicated that “software would eat the world”.
And to little surprise, year after year, the world has become more and more reliant on software solutions. Often times, that software is (or indirectly depends on) some open source software, maintained by a group of people whose only affiliation to one another may be participation in that open source project’s community.
But we’re in trouble. The security of open source software is under threat and we’re running out of people to reliably maintain those projects.</description>
      <content:encoded><![CDATA[<p>Years ago, entrepreneurs and innovators predicated that
<a href="https://a16z.com/2011/08/20/why-software-is-eating-the-world/">“software would eat the world”.</a></p>
<p>And to little surprise, year after year, the world has become more and
more reliant on software solutions. Often times, that software is (or
indirectly depends on) some open source software, maintained by a group of
people whose only affiliation to one another may be participation in that open
source project’s community.</p>
<p>But we’re in trouble. The security of open source
software is under threat and we’re running out of people to reliably maintain
those projects. And as our stacks get deeper, our dependencies become more
interlinked, leading to terrifying compromises in the secure software
supply-chain. For a perfect example of what’s happening in the open source
world right now, we don’t need to look much further than the extremely popular
<a href="https://github.com/orgs/gorilla/repositories">Gorilla toolkit for Go.</a></p>
<p>In December of 2022, Gorilla was archived, a project
that provided powerful web framework technology like mux and sessions. Over its
lengthy tenure, it was the de facto Go framework for web servers, routing
requests, handling HTTP traffic, and using websockets. It was used by tens of
thousands of other software packages and it came as a shock to most people in
the Go community that the project would be no more; no longer maintained, no
more releases, and no community support. But for anyone paying close enough
attention, the signs of turmoil were clear:
<a href="https://github.com/gorilla/websocket/issues/370">open calls for maintainers</a>
went unanswered, there were few active outside contributors, and the burden of
maintainership was very heavy.</p>
<p>The Gorilla framework was one of those “important dependencies”. It sat at the
critical intersection of providing nice quality of life tools while still
securely handling important payloads. Developers would mold their logic around
the APIs provided by Gorilla and entire codebases would be shaped by the use of
the framework. The community at large trusted Gorilla; the last thing you want
in your server is a web framework riddled with bugs and CVEs. In the secure
software supply-chain, much like Nginx and OpenSSL, it’s a project that was at
the cornerstone of many other supply-chains and dependencies. If something went
wrong in the Gorilla framework, it had the potential to impact millions of
servers, services, and other projects.</p>
<p>The secure software supply-chain is one of those abstract concepts that giant
tech companies, security firms, and news outlets all love to buzz wording
about. It’s the “idea” that the software you are consuming as a dependency, all
the way through your stack, is exactly the software you’re expecting to
consume. In other words, it’s the assurance that some hacker didn’t inject a
backdoor into a library or build tool you use, compromising your entire
product, software library, or even company. Supply-chain attacks are mischievous
because they almost never go after the actual intended target. Instead, they
compromise some dependency to then go after the intended target.</p>
<p>The classic example, still to this day, is
<a href="https://www.gao.gov/blog/solarwinds-cyberattack-demands-significant-federal-and-private-sector-response-infographic">the Solar Winds attack:</a>
some unnamed, Russian state-backed hacker group was able to compromise the internal
Solar Winds build system, leaving any subsequent software built using that
system injected with backdoors and exploits.
<a href="https://www.nytimes.com/2020/12/14/us/politics/russia-hack-nsa-homeland-security-pentagon.html">The fallout from this attack was massive.</a>
Many government agencies, including the State Department, confirmed
massive data breaches. The estimated cost of this attack continues to rise and
<a href="https://www.nytimes.com/2020/12/16/us/politics/russia-hack-putin-trump-biden.html">is estimated to be in the billions of dollars.</a></p>
<p>Product after product have popped up in the last few years to try and solve
these problems: software signing solutions, automated security scanning tools,
up to date CVE databases, automation bots, AI assisted coding tools, etc. There
was even a whole Whitehouse counsel on the subject. The federal government
knows this is the most important (and most critically vulnerable) vector to the
well being of our nation’s software infrastructure and they’ve been taking
direct action to fight these kind of attacks.</p>
<p>But the secure software supply-chain is also one of those things that falls
apart quickly; without delicate handling and meticulous safeguarding, things go
south fast. For months, the Gorilla toolkit had an open call for maintainers,
seeking additional people to keep its codebases up to date, secure, and well
maintained. But in the end, the Gorilla maintainers couldn’t find enough people
to keep the project afloat. Many people volunteered but then were never seen
again. <a href="https://github.com/gorilla#gorilla-toolkit">And the bar for maintainer-ship was rightfully very high:</a></p>
<blockquote>
<p>just handing the reins of even a single software package that has north of 13k
unique clones a week (mux) is just not something I’d ever be comfortable with.
This has tended to play out poorly with other projects.</p>
</blockquote>
<p>And in the past, this has played out poorly in other projects:</p>
<p>In 2018, GitHub user FallingSnow opened
<a href="https://github.com/dominictarr/event-stream/issues/116">the issue “I don’t know what to say.”</a>
in the popular, but somewhat unknown, NPM JavaScript package event-stream. He&rsquo;d
found something very peculiar in recent commits to the library. A new
maintainer, not seen in the community before, with what appeared to be an
entirely new GitHub account, had committed a strange piece of code directly to
the main branch. This unknown new maintainer had also cut a new package to the
NPM registry, forcing this change onto anyone tracking the latest packages in
their project.</p>
<p>The changes looked like this: In a new file, a long inline encrypted string was
added. The string would be decoded using some unknown environment variable, and
then, that unencrypted string would be injected as a JavaScript module into the
package, effectively executing whatever code was hidden behind the encrypted
string. In short, unknown code was being deciphered, injected, and executed at
runtime.</p>
<p>The GitHub issue went viral. And through sheer brute force, abit of luck, and
hundreds of commenters, the community was able to decrypt the string, revealing
the injected code’s purpose: a crypto-currency “wallet stealer”. If the code
detected a specific wallet on the system, it used a known exploit to steal all
the crypto stored in that wallet.</p>
<p>This exploitative code lived in the event-stream NPM module for months. Going
undetected by security scanners, consumers, and the project’s owner. Only when
someone in the community who was curious enough to take a look did this obvious
code-injection attack become clear. But what made this attack especially bad
was that the event-stream module was used by many other modules (and those
modules used by other modules, and so on). In theory, this potentially affected
thousands of software packages and millions of end-users. Developers who had no
idea their JavaScript used event-stream deep in their dependency stack were now
suddenly having to quickly patch their code. How was this even possible? Who
approved and allowed this to happen?</p>
<p><a href="https://github.com/dominictarr/event-stream/issues/116#issuecomment-440927400">The owner of the GitHub repository, and original author of the code, said:</a></p>
<blockquote>
<p>he emailed me and said he wanted to maintain the module, so I gave it to him. I
don&rsquo;t get any thing from maintaining this module, and I don&rsquo;t even use it
anymore, and havn&rsquo;t for years.</p>
</blockquote>
<p>and</p>
<blockquote>
<p>note: I no longer have publish rights to this module on npm.</p>
</blockquote>
<p>Just like that, just by asking, some bad actor was able to compromise tens of
thousands of software packages, going undetected through the veil of
“maintainership”.</p>
<p>In the past, I’ve referred to this as “The Risks of Single Maintainer
Dependencies”: the overwhelming, often lonely, and sometimes dangerous
experience of maintaining a widely distributed software package on your own.
Like the owner of event-stream, most solo maintainers drift away, fading into
the background to let their software go into disarray.</p>
<p><a href="https://github.com/gorilla#gorilla-toolkit">This was the case with Gorilla:</a></p>
<blockquote>
<p>The original author and maintainer, moraes, had moved on a long time ago.
kisielk and garyburd had the longest run, maintaining a mix of the HTTP
libraries and gorilla/websocket respectively. I (elithrar) got involved
sometime in 2014 or so, when I noticed kisielk doing a lot of the heavy lifting
and wanted to help contribute back to the libraries I was using for a number of
personal projects. Since about ~2018 or so, I was the (mostly) sole maintainer
of everything but websocket, which is about the same time garyburd put out an
(effectively unsuccessful) call for new maintainers there too.</p>
</blockquote>
<p>The secure software supply-chain will never truly be strong and secure as long
as a single solo maintainer is able to disrupt an entire ecosystem of packages
by giving their package away to some bad actor. In truth, there is no secure
software supply-chain: we are only as strong as the weakest among us and too
often, those weak links in the chain are already broken, left to rot, or given
up to those with nefarious purposes.</p>
<p>Whenever I bring up this topic, someone always asks about money. Oh, money,
life’s truest satisfaction! And yes! Money can be a powerful motivator for some
people. But it’s a sad excuse for what the secure software supply-chain really
needs: true reliability. The software industry can throw all the money it wants
at maintainers of important open source projects,
<a href="https://www.theverge.com/23499215/valve-steam-deck-interview-late-2022">something Valve has started doing:</a></p>
<blockquote>
<p>Griffais says the company is also directly paying more than 100 open-source
developers to work on the Proton compatibility layer, the Mesa graphics driver,
and Vulkan, among other tasks like Steam for Linux and Chromebooks.</p>
</blockquote>
<p>but at some point, it becomes unreasonable to ask just a handful of people to
hold up the integrity, security, and viability of your companies entire product
stack. If it’s that important, why not hire some of those people, build a team
of maintainers, create processes for contribution, and allocate developer time
into the open source? Too often I hear about solving open source problems by
just throwing money at it, but at some point, the problems of scaling software
delivery outweigh any amount you can possibly pay a few people. Let’s say you
were building a house, it might make sense to have one or two people work on
the foundation. But if you’re zoning and building an entire city block, I’d
sure hope you’d put an entire team on planning, building, and maintaining those
foundations. No amount of money will make just a few people build a strong and
safe foundation all by themselves. But what we’re asking some open source
maintainers to do is to plan, build, and coordinate the foundations for an
entire world.</p>
<p><a href="https://github.com/gorilla#gorilla-toolkit">And this is something the Gorilla maintainers recognized as well:</a></p>
<blockquote>
<p>No. I don’t think any of us were after money here. The Gorilla Toolkit was,
looking back at the most active maintainers, a passion project. We didn’t want
it to be a job.</p>
</blockquote>
<p>For them, it wasn’t about the money, so throwing any amount at the project
wouldn’t have helped. It was about the software’s quality, maintainability, and
the kind of intrinsic satisfaction it provided.</p>
<p>So then, how can we incentivize open source maintainers to maintain their
software in a scalable, realistic way? Some people are motivated by the
altruistic value they provide to a community. Some are motivated by fame,
power, and recognition. Others still just want to have fun and work on
something cool. It’s impossible to understand the complicated, interlinked way
different people in an open source community are all motivated. Instead, the
best solution is obvious: If you are on a team that relies on some piece of
open source software, allocate real engineering time to contributing, being
apart of the community, and helping maintain that software. Eventually, you’ll
get a really good sense of how a project operates and what motivates its main
players. And better yet, you’ll help alleviate the heavy burden of solo
maintainership.</p>
<p>Sometimes, I like to think of software like its a wooden canoe, its many
dependencies making up the wooden strips of the boat. When first built, it
seems sturdy, strong, and able to withstand the harshest of conditions. Its
first coat of oil finish is fresh and beautiful, its wood grains smooth and
unbent. But as the years ware on, eventually, its finish fads, its wooden
strips need replacing, and maybe, if it takes on water, it requires time and
new material to repair. Neglected long enough, and its wood could mold and rot
from the inside, completely compromising the integrity of the boat. And just
like a boat, software requires time, energy, maintenance, and “hands-on-deck”
to ensure its many links in the secure software supply-chain are strong.
Otherwise, the termites of time and the rot of bad-actors weaken links in the
chain, compromising the stability of it all.</p>
<p>In the end, the maintainers of the Gorilla framework did the right thing: they
decommissioned a widely used project that was at risk of rotting from the
inside out. And instead of let it live in disarray or potentially fall into the
hands of bad actors, it is simply gone. Its link on the chain of software has
been purposefully broken to force anyone using it to choose a better, and
hopefully, more secure option.</p>
<blockquote>
<p>I do believe that open source software is entitled to a lifecycle — a
beginning, a middle, and an end — and that no project is required to live on
forever. That may not make everyone happy, but such is life.</p>
</blockquote>
<p>But earlier this year, people in the Gorilla community noticed something:
a new group of individuals from Red Hat had been added as maintainers to the Gorilla GitHub org.
Was Red Hat taking the projected over? No, but ironically, the emeritus maintainers
had done exactly what they promised they would never do: at the 11th hour, they handed
over the project to people with little vetting from the community.</p>
<blockquote>
<p>To address many comments that we have seen - we would like to clarify that
Red Hat is not taking over this project. While the new Core Maintainers all
happen to work at Red Hat, our hope is that developers from many different
organizations and backgrounds will join the project over time.</p>
</blockquote>
<p>Maybe Gorilla was too important to drift slowly into obscurity and Red Hat
rightfully allocated some engineering resources to the project.
Gorilla lives on. Here&rsquo;s hoping the code is in good hands.</p>
<hr>
<p>If you found this blog post valuable,
consider <a href="https://johncodes.com/index.xml">subscribing to future posts via RSS</a>
or <a href="https://github.com/sponsors/jpmcb">buying me a coffee via GitHub sponsors.</a></p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    <item>
      <title>On maintaining spf13/cobra</title>
      <link>//localhost:1313/posts/2023/06-29-on-maintaining-cobra/</link>
      <pubDate>Thu, 29 Jun 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/2023/06-29-on-maintaining-cobra/</guid>
      <description>There&amp;rsquo;s something I feel like I need to acknowledge around my maintainership of spf13/cobra.
During my time at AWS, I had a really hard time contributing to open source projects that were important to me (and important to the broader ecosystem). I didn&amp;rsquo;t have the energy, but more importantly, I didn&amp;rsquo;t have the bandwidth.
There&amp;rsquo;s alot of red tape to get through when it comes to open source at Amazon. After all, AWS alone is a massive business unit with thousands of products and tens of thousands of engineers all around the world.</description>
      <content:encoded><![CDATA[<p>There&rsquo;s something I feel like I need to acknowledge
around <a href="https://github.com/spf13/cobra">my maintainership of</a>
spf13/cobra.</p>
<p>During my time at AWS, I had a <em>really</em> hard time contributing to open source
projects that were important to me (and important to the broader ecosystem).
I didn&rsquo;t have the energy, but more importantly, I didn&rsquo;t have the bandwidth.</p>
<p>There&rsquo;s alot of red tape to get through when it comes to open source at Amazon.
After all, AWS alone is a massive business unit with thousands of products
and tens of thousands of engineers all around the world.</p>
<p>And I totally get it: there&rsquo;s legal &amp; licensing considerations,
there&rsquo;s staffing calculations, there&rsquo;s non-competes, there&rsquo;s product commitments,
there&rsquo;s other competing companies working on the same projects in the open source, etc. etc.
All this leaves very little room for individual contributors to give back to the community
where they have the autonomy and the power to do so.</p>
<p>Eventually, I did get the <em>&ldquo;all clear&rdquo;</em> to work on cobra, but I wasn&rsquo;t given any flexibility
to find time to maintain the project.
Which was fine. I wasn&rsquo;t hired to work on cobra. And it&rsquo;s more or less always been
a &ldquo;bonus&rdquo; thing I&rsquo;ve worked on.</p>
<p>But it really pained me to not be able to dedicate <em>some</em> time to an important project
within the Cloud Native and Kubernetes ecosystem.
In the last 3 months alone, <a href="https://insights.opensauced.pizza/pages/jpmcb/363/dashboard">cobra&rsquo;s PR velocity has crawled to a standstill</a>,
there have been only a few merged PRs,
and we&rsquo;ve neglected to keep up with triaging new issues.</p>
<p><code>spf13/cobra</code> is abit of a weird project (at least from an <em>&ldquo;enterprise open source office&rdquo;</em> perspective).
It&rsquo;s a code library with basically no way to <em>&ldquo;product-ize&rdquo;</em> it.
It gives you the Go APIs and frameworks to build modern and elegant command line interfaces.
It&rsquo;s one of those deep dependencies that can go unnoticed for years until something goes terribly wrong
but in itself, it isn&rsquo;t anything you can give to people; you must build on top of it.</p>
<p>I tried my best to pitch my case to get some amount of allocation into the project.
But no luck. Maybe it was the economy, maybe it was the layoffs, I&rsquo;m really not sure.
Regardless, my allocation didn&rsquo;t change.
Whenever I&rsquo;ve tried to explain to a product manager, an engineering manager, or a business person
why leaving cobra to rot risks our entire secure software supply chain,
I&rsquo;m often met with blank stares.
<em>&ldquo;Why work on a CLI framework when you should be working on products?&rdquo;</em>
or
<em>&ldquo;This doesn&rsquo;t seem critical to our bottom line.&rdquo;</em></p>
<p>Compare that to something like core Kubernetes (<a href="https://github.com/kubernetes/kubernetes/blob/c78204dc06d5b0bc02fc2f6bb7dbf98552180d26/go.mod#L62"><em>which in itself uses cobra</em></a>),
a platform for running and managing containerized workloads and services in the cloud.
Now <em>that</em> sounds like a product you can ship!
You can easily see how AWS justifies having entire teams allocated to maintaining upstream open source projects, like Kubernetes,
when the wellness and maintenance of those projects directly correlates to the bottom line of a product.</p>
<p>But <code>spf13/cobra</code> is used <em>throughout</em> several important AWS led open source projects.
Just to name a few:</p>
<ul>
<li><a href="https://github.com/containerd/nerdctl/blob/29fd529c8a684be58c67c052b4842221542212a7/go.mod#L48">containerd&rsquo;s nerdctl</a></li>
<li><a href="https://github.com/runfinch/finch/blob/f7e091670fb2ac5377423e72f98aa8be33aa41c8/go.mod#L18">finch</a></li>
<li><a href="https://github.com/weaveworks/eksctl/blob/dce1ef8f39223db7ab45419eac0c9b1fdaea7a44/go.mod#L61">eksctl</a></li>
<li><a href="https://github.com/aws/copilot-cli/blob/5b6f75d457bff8d13563fb6034c5d3b9ce157e39/go.mod#L22">the copilot CLI</a></li>
</ul>
<p>Maybe the <em>&ldquo;engineering allocation chain&rdquo;</em> only goes one or two layers deep.
Not deep enough to notice a dependency like cobra and its lack of maintenance.</p>
<p>In 2022, I gave a talk at KubeCon EU about maintaining cobra with a very small group,
what the &ldquo;solo&rdquo; maintainer experience is like, and why solo maintainer projects are incredibly dangerous
to the wellness of the entire ecosystem and broader secure software supply-chain.</p>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/YBsDnXXW_d8?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

<hr>
<p>I think about that talk alot.
And it keeps me up at night sometimes:
what would it take for a bad actor to hack my GitHub account and inject some
malicious dependency into cobra (therefore poisoning the dependencies in
<a href="https://johncodes.com/posts/2023/06-13-goodbye-aws/">Kubernetes</a>,
<a href="https://github.com/helm/helm/blob/03911aeab78290394e589cf7705d3fd542a236c9/go.mod#L32">Helm</a>,
<a href="https://github.com/istio/istio/blob/36e6875994e53ddb28e86d6a5f13b56ca15a41d3/go.mod#L75">Istio</a>,
<a href="https://github.com/linkerd/linkerd2/blob/18755e45cc590c590eedcfa3d30ade09c8b8e7e1/go.mod#L35">Linkerd</a>,
<a href="https://github.com/docker/cli/blob/d2b376da9256df7d1d0c1fc310db621bd18dc21b/vendor.mod#L35">Docker</a>, etc. etc.).
How long before people would notice?
How much damage would be done, even in a short amount of time?</p>
<p>I sort of feel like I&rsquo;ve let the cobra and Kubernetes community down.
And I feel like I&rsquo;ve become the exact sort of open source maintainer that I cautioned against in that talk:
<em>distant, difficult to reach, not engaging with the community, jaded, burned out.</em>
But I know it all doesn&rsquo;t rest on my shoulders: there are other people
in the community that keep very close eyes on cobra.
I care deeply about the security and well-being of this project,
but it&rsquo;s clear to me (and probably to you too) that I need a break.</p>
<p>So, what does all this mean for my work on cobra?</p>
<p>Well, thankfully, <a href="https://johncodes.com/posts/2023/06-13-goodbye-aws/">I&rsquo;ve found a breath of fresh air</a>
now working with a small team at <a href="https://opensauced.pizza/">OpenSauced</a>.</p>
<p>And, this summer, while I ramp up with the new job,
I plan to continue to maintain cobra,
but I&rsquo;m going to take some time away from some of these open source responsibilities.
I think this will give me the rest I need to approach cobra and other projects
with a renewed sense of purpose latter this summer.</p>
<p>I&rsquo;m taking a trip to Iceland this month where I&rsquo;ll unplug,
read a few books, take some pictures with my camera,
and forget about the world of the secure software supply-chain.</p>
<p>Until then, happy building!</p>
<hr>
<p>If you found this blog post valuable, comment below,
<a href="https://johncodes.com/index.xml">subscribe to future posts via RSS</a>,
or <a href="https://github.com/sponsors/jpmcb">buy me a coffee via GitHub sponsors.</a></p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    <item>
      <title>NeoVim: Using the spellchecker</title>
      <link>//localhost:1313/posts/2023/02-25-nvim-spell/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/2023/02-25-nvim-spell/</guid>
      <description>I know.
Any sane person&amp;rsquo;s editor already has spellchecking built in. And enabled by default. But I could never leave my beloved Neovim (and all the muscle memory I&amp;rsquo;ve built) just to spell things correctly! That&amp;rsquo;s why I became a programmer dammit! Who needs to know how to spell correctly when I can have single character variable names! Besides. We have tools. Isn&amp;rsquo;t that what computers are for!? Automate the boring stuff!</description>
      <content:encoded><![CDATA[

    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/KoL-2WTlr04?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

<hr>
<p><em>I know.</em></p>
<p>Any <em>sane</em> person&rsquo;s editor already has spellchecking built in.
And enabled by default.
But I could never leave my beloved Neovim
(and all the muscle memory I&rsquo;ve built) just to spell things correctly!
That&rsquo;s why I became a programmer dammit! Who needs to know how to spell correctly
when I can have single character variable names!
Besides. We have <em>tools</em>. Isn&rsquo;t that what computers are for!?
Automate the boring stuff! <em>(like spelling and grammar).</em></p>
<p>Thankfully, the long awaited <code>spell</code> integration features have landed in the NeoVim APIs.
While <code>spell</code> has been around forever (or at least as long as Vim has been),
<a href="https://github.com/neovim/neovim/pull/19419">only recently have the NeoVim Lua APIs</a>
been able to take advantage of it.
Now, by default, <em>without plugins</em>, nvim can make spelling suggestions and
treesitter can do the right things with misspellings in the
syntax highlighting, code parsing, and search queries.
Or in other words, <code>spell</code> is <em>waaay</em> nicer to use since it&rsquo;ll ignore code (but not other stuff).</p>
<p>This has already <em>greatly</em> increased my productivity when writing.
If you know anything about me (or have had the pleasure of working with me
and seeing my egregious spelling mistakes),
you know that I can <em>not</em> spell.
My reliance on good spell checker tools has really evolved into a dependency.
But no longer! Now, I can continue to convince myself that nvim
is a superior editor because it finally has <em>spell checking</em>.</p>
<p>In all seriousness, shout out to the NeoVim community and maintainers
for getting this feature in!! It&rsquo;s already been a huge value add
and saved me on <em>several</em> occasion from pushing an embarrassing commit message.</p>
<hr>
<h3 id="enabling-it">Enabling it</h3>
<p>Make sure you have a new-ish version of NeoVim.
I&rsquo;m running with a newer nightly build, but the latest official release should do the trick.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>❯ nvim --version
</span></span><span style="display:flex;"><span>NVIM v0.9.0-dev-699+gc752c8536
</span></span></code></pre></div><p>In your nvim configuration files, you&rsquo;ll want to set the one of the following options:</p>
<ul>
<li><em>For those who&rsquo;ve ascended to using Lua</em>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-lua" data-lang="lua"><span style="display:flex;"><span>vim.opt.spelllang <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;en_us&#39;</span>
</span></span><span style="display:flex;"><span>vim.opt.spell <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><ul>
<li><em>Or good, ol trusty Vimscript</em>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#66d9ef">set</span> <span style="color:#a6e22e">spelllang</span>=<span style="color:#a6e22e">en_us</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">set</span> <span style="color:#a6e22e">spell</span>
</span></span></code></pre></div><p>Alternatively, you can use the command prompt to enable <code>spell</code> in your current session:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>:setlocal spell spelllang=en_us
</span></span></code></pre></div><p>Note that <code>en_us</code> is <em>US English</em>.
But there are <em>tons</em> of supported languages out of the box:
<code>en_gb</code> for Great Britian English,
<code>de</code> for German, <code>ru</code> for Russian, and more.</p>
<p>Now, you should see words that are misspelled underlined! Nice!!</p>
<h3 id="using-it">Using it</h3>
<p>There are 3 default key-mappings my workflow has revolved around
for fixing spelling mistakes when I&rsquo;m writing.</p>
<h4 id="finding-words">Finding words:</h4>
<p><code>]s</code> will go to the <em>next</em> misspelled word.</p>
<p><code>[s</code> will go to the <em>previous</em> misspelled word.</p>
<p>Easy as that! These default key-mappings are designed to be composable
(or heck, modified in any way you like - this is NeoVim after all!)
so spend some time thinking about what re-mappings, key bindings,
or macros might make sense for you and your workflow.</p>
<h4 id="fixing-words">Fixing words:</h4>
<p>When the cursor is under a word that is misspelled,
<code>z=</code> will open the list of suggestions.
Typically, the first suggestion is almost always right.
Hit <code>1</code> and <code>&lt;enter&gt;</code> in the prompt to indicate you want to take the first suggestion.
And the word has been fixed!</p>
<p>There&rsquo;s also</p>
<pre tabindex="0"><code>:spellr
</code></pre><p>which is the &ldquo;spell repeater&rdquo;. It repeats the replacement done by <code>z=</code>
for all matched misspellings in the current window.
So, if there&rsquo;s a word you <em>frequently</em> misspell, using <code>:spellr</code> is a quick and easy
one stop shop for fixing <em>all</em> the misspellings of that type.</p>
<h3 id="adding-words-to-the-spellfile">Adding words to the spellfile</h3>
<p>If you&rsquo;ve typed a word that doesn&rsquo;t appear in the default dictionary,
<em>but is spelled correctly</em>, you can easily add it yourself to the internal spell list.
Especially in programming docs, there are <em>lots</em> of words not loaded into the default dictionary.
With your cursor under the <em>correctly</em> spelled word that is underlined as misspelled,
use the <code>zg</code> mapping to mark the word as a &ldquo;good&rdquo; word.</p>
<p>Doing this, you&rsquo;ll notice that NeoVim will automatically create a <code>spell/</code> directory
in the runtime path (typically under <code>~/.config/nvim</code>).
And in that directory, you&rsquo;ll find two files:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>~/.config/nvim/
</span></span><span style="display:flex;"><span>  |-- spell
</span></span><span style="display:flex;"><span>  |    |-- en.utf-8.add
</span></span><span style="display:flex;"><span>  |    |-- en.utf-8.add.spl
</span></span></code></pre></div><p>The <code>.add</code> file is a list of words you&rsquo;ve added.
For example, my <code>.add</code> file has <em>tech</em> words like &ldquo;Kubernetes&rdquo;
which don&rsquo;t typically appear in the default English dictionary.</p>
<p>The <code>.spl</code> file is a compiled binary &ldquo;spellfile&rdquo;.
And it&rsquo;s what is used to actually make suggestions and crawl the dictionary graph.
Creating spellfiles is &hellip; <em>rather</em> involved.
But, for most people, simply using <code>zg</code> to mark &ldquo;good&rdquo; words gets you 99% of the way there.</p>
<hr>
<p>As with most things NeoVim,
there are <em>excellent</em> docs and APIs for using the spell interface: <a href="https://neovim.io/doc/user/spell.html">https://neovim.io/doc/user/spell.html</a>
Especially if you plan to generate your own spellfiles
or programmatically modify text via the spell APIs,
these doc resources are a must read!</p>
<hr>
<p>If you found this blog post valuable, comment below,
consider <a href="https://johncodes.com/index.xml">subscribing to future posts via RSS</a>
or <a href="https://github.com/sponsors/jpmcb">buying me a coffee via GitHub sponsors.</a>
Your support means the world to me!!</p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    <item>
      <title>So long windows 7!</title>
      <link>//localhost:1313/posts/2023/01-14-sat-edition/</link>
      <pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/2023/01-14-sat-edition/</guid>
      <description>Welcome to the &amp;ldquo;Sunday Edition&amp;rdquo; of my blog. This is my (occasionally) recurring weekly news letter where I highlight some interesting things from across the tech industry, share a few insights from the week, and give you a chance to catch up on some worth-while reads from around the internet.
If you&amp;rsquo;d like to subscribe via RSS and receive new posts, you can find the atom feed here.
News Microsoft ended long term support for Windows 7 this week.</description>
      <content:encoded><![CDATA[<p>Welcome to the <em>&ldquo;Sunday Edition&rdquo;</em> of my blog. This is my (occasionally) recurring weekly
news letter where I highlight some interesting things from across the tech industry, share a
few insights from the week, and give you a chance to catch up on some
worth-while reads from around the internet.</p>
<p>If you&rsquo;d like to subscribe via RSS and receive new posts,
you can find <a href="https://johncodes.com/index.xml">the atom feed here.</a></p>
<hr>
<h2 id="news">News</h2>
<p>Microsoft ended long term support for Windows 7 this week.</p>
<p>This means that both the Windows 7 Professional and Enterprise editions will no
longer receive any kind of security updates. And while “support” for Windows 7
ended in January of 2020, Microsoft has had a hard time putting this operating
system down; many deeply entrenched industries (like healthcare, manufacturing,
defense, and governement) still used it heavily. By some estimates, some 11% of
all Windows users are still using Windows 7.</p>
<p>I’d anticipate this version of Windows becoming a major target for bad actors
out in the wild. Major exploits of older Windows versions have been discovered
long after edtended support ended and with Windows 7 massive footprint, it
remains a very high value target for many.</p>
<p>If you still use Windows 7, now is the time to update.</p>
<h2 id="good-reads-from-across-the-internet">Good reads from across the internet</h2>
<ul>
<li><em>This girl is going to kill herself - Krista Diamond on Long Reads</em></li>
</ul>
<p>Before I got into software engineering, I worked a few summers in the outdoor
rec industry as a mountain guide. I lead rock climbing trips, rafted rivers,
hiked 14-ers, and bushwacked in the backcountry. And like this story from
Krista Diamond reflects on, I too faced unprecedented life or death situations
in the backcountry. But too often, time and time again, I would brush off my
experiance as</p>
<p>We as humans are very bad at assessing risk. People don’t conceptualize
statistics, especially when it pertains to them personally. Whether it’s the
risk of weather on the mountain or the risk of missing delivery deadlines at
work, people don’t really understand the risk until it’s usually too late.</p>
<p>One of the best ways to combat this in my own life and work is to make the risk
more digestible and specific: “The backcountry is dangerous and risky” is
difficult to conceptualize. But “crossing a river at peak flow while wearing
your pack is dangerous and risky” is way easier to reason about. “Re-writing
the entire app is risky” is difficult to conceptualize. But “re-writing the app
to use a newest web framework would require we adopt a new database schema
which entails doing risky and costly migrations” is easier to reason about.</p>
<ul>
<li><em>Jeff Beck, Guitarist With a Chapter in Rock History, Dies at 78 - The New York
Times</em></li>
</ul>
<p>When I was 12, I got my first guitar. I always wanted to play like my dad and
my big brother. I learned the basics from my dad but then (like any teenager
would), I wanted to find my own path. I would go to the local library, browse
their collection of CDs, find albums with interesting enough covers, and check
them out. I’d then head home, put the CD into my disc changer, pick up my
guitar, and try my best to play along.</p>
<p>I stumbled onto Jeff Beck’s Wired album, put it on, and was immediately
introduced to Led Boots:</p>
<p>I’d never heard anything like it; a mix of sweeping rock solos, complex jazz
changes, nuanced beats, &amp; a mixing of melody and rythmn.</p>
<p>I went back to the library and I checked out ever Jeff Beck album they had. For
me, his music was something very special. It was so different from any of the
radio rock I’d heard before. It’s what got me interested in exploring jazz. And
to one midwest teenager with a guitar, it helped inspire a lifetime love of
music and creating.</p>
<h1 id="command-line-tip">Command line tip</h1>
<p>If you’re anything like me, you have a highly configured command line
environment with alot of aliases. And sometimes, you need to escape using an
alias in favor of its original intent. A good example in my environment is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>$ which vim
</span></span><span style="display:flex;"><span>vim: aliased to nvim
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ vim --version
</span></span><span style="display:flex;"><span>NVIM v0.8.2
</span></span></code></pre></div><p>I use NeoVim almost exclusively so the “vim” alias makes sense 99% of the time.
But whenever I need <em>actual</em> vim, I can escape my alias using a backslash:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>$ \vim --version
</span></span><span style="display:flex;"><span>VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2016 16:44:48)
</span></span></code></pre></div><p>This (unfortunately) won’t work on fish but is a great little backdoor
alias escape for zsh, bash, etc.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Hello World</title>
      <link>//localhost:1313/posts/2023/helloworld/</link>
      <pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/2023/helloworld/</guid>
      <description>Welcome to the &amp;ldquo;Sunday Edition&amp;rdquo; of my blog. This is my (occasionally) recurring weekly news letter where I highlight some interesting things from across the tech industry, share a few insights from the week, and give you a chance to catch up on some worth-while reads from around the internet.
If you&amp;rsquo;d like to subscribe via RSS and receive new posts, you can find the atom feed here.
Hello World This is my blog</description>
      <content:encoded><![CDATA[<p>Welcome to the <em>&ldquo;Sunday Edition&rdquo;</em> of my blog. This is my (occasionally) recurring weekly
news letter where I highlight some interesting things from across the tech industry, share a
few insights from the week, and give you a chance to catch up on some
worth-while reads from around the internet.</p>
<p>If you&rsquo;d like to subscribe via RSS and receive new posts,
you can find <a href="https://johncodes.com/index.xml">the atom feed here.</a></p>
<hr>
<h1 id="hello-world">Hello World</h1>
<p>This is my blog</p>
<h2 id="code">Code</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>print(&#34;Hello World&#34;)
</span></span></code></pre></div><h1 id="fin">FIN</h1>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
  </channel>
</rss>
